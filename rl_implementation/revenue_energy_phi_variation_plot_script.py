import os
import numpy as np
import json
import matplotlib.pyplot as plt
from textwrap import wrap


def create_plot(accumulation_dict_save_folder, plot_name, plot_details_dict):
    os.makedirs(accumulation_dict_save_folder, exist_ok=True)
    accumulation_dict_save_filename = "accumulated_data.json"
    with open(os.path.join(accumulation_dict_save_folder, accumulation_dict_save_filename), "r") as accumulation_dict_file:
        accumulated_dict = json.load(accumulation_dict_file)

    if 'figsize' in plot_details_dict:
        figsize = plot_details_dict['figsize']
    else:
        figsize = 11
    axes_font_dict = {
        'ax1': {'dict_keyname': 'profit', 'fontsize': 15, 'color': plot_details_dict['color_ax1'], 'marker': 'o'},
        'ax2': {'dict_keyname': 'energy_cost', 'fontsize': 15, 'color': plot_details_dict['color_ax2'], 'marker': 'X'}
        }
    
    fig, ax1 = plt.subplots(1, figsize=(figsize,figsize))
    ax1.tick_params(labelsize='13')
    xvalues = list(accumulated_dict['spa'].keys())
    # naming the x axis
    x_label = plot_details_dict['x_label']
    ax1.set_xlabel(x_label, fontdict={'fontsize': 18})

    # 1st y-axis
    legend_handle = []
    legend_labels = []
    algo_type="spa"
    ax1_values=list(map(lambda x: accumulated_dict[algo_type][x][axes_font_dict['ax1']['dict_keyname']], list(accumulated_dict[algo_type].keys())))
    plot_obj, = ax1.plot(xvalues, ax1_values, color=axes_font_dict['ax1']['color'], \
        marker=axes_font_dict['ax1']['marker'], linestyle='dashed', linewidth=2, markersize=12)
    legend_handle.append(plot_obj)
    legend_labels.append(axes_font_dict['ax1']['dict_keyname'])
    ax1_label = plot_details_dict['ax1']
    ax1.set_ylabel(ax1_label, fontdict={'fontsize': 18}, color=axes_font_dict['ax1']['color'])
    ax1.tick_params(axis='y', labelcolor=axes_font_dict['ax1']['color'])

    # # FOR TESTING:
    # # system profit 
    # profit_values = list(map(lambda x: accumulated_dict[algo_type][x]['profit'], list(accumulated_dict[algo_type].keys())))
    # plot_obj, = ax1.plot(xvalues, profit_values, color="tab:blue", \
    #     marker='^', linestyle='dashed', linewidth=2, markersize=12)
    # legend_handle.append(plot_obj)
    # legend_labels.append('profit')
    # # END OF TESTING BLOCK

    # 2nd y-axis
    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
    ax2_values=list(map(lambda x: accumulated_dict[algo_type][x][axes_font_dict['ax2']['dict_keyname']], list(accumulated_dict[algo_type].keys())))
    plot_obj, = ax2.plot(xvalues, ax2_values, color=axes_font_dict['ax2']['color'], \
        marker=axes_font_dict['ax2']['marker'], linestyle='dashed', linewidth=2, markersize=12)
    legend_handle.append(plot_obj)
    legend_labels.append(axes_font_dict['ax2']['dict_keyname'])
    ax2_label = plot_details_dict['ax2']
    ax2.set_ylabel(ax2_label, fontdict={'fontsize': 18}, color=axes_font_dict['ax2']['color'])
    ax2.tick_params(axis='y', labelcolor=axes_font_dict['ax2']['color'])

    ax1.legend(handles=legend_handle, labels=legend_labels, fontsize="17", ncol=2)
    plot_title = plot_details_dict['title']
    title = ax1.set_title("\n".join(wrap(plot_title, 60)), fontdict={'fontsize': 20})
    # ax.set_title("Variation of total system profit and energy consumption costs DRLSPA on varying multiplier for phi", fontdict={'fontsize': 20})

    fig.tight_layout()  # otherwise the right y-label is slightly clipped
    plt.savefig(os.path.join(accumulation_dict_save_folder, plot_name))
    plt.close(fig)
    return

current_dir = os.getcwd()



###for revenue_energy_cost_phi_plot
plot_details_dict = {
    'figsize': 11,
    'x_label': 'Multiplier for energy consumption cost coefficient (phi)',
    'ax1': 'Total system profit',
    'color_ax1': 'tab:blue',
    'ax2': 'Total system energy consumption cost',
    'color_ax2': 'tab:red',
    'title': "Variation of total system profit and energy consumption costs generated by DRLSPA on varying multiplier for phi",
}
plot_name = "revenue_energy_cost_phi_plot.png"
accumulation_dict_save_folder = os.path.join(current_dir, "comparative_plots", "revenue_energy_cost_phi_comparison_plot_folder")

create_plot(accumulation_dict_save_folder, plot_name, plot_details_dict)